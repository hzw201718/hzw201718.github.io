<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣20题：有效的括号</title>
      <link href="/2022/11/14/%E5%8A%9B%E6%89%A320%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/2022/11/14/%E5%8A%9B%E6%89%A320%E9%A2%98%EF%BC%9A%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="思路：栈"><a href="#思路：栈" class="headerlink" title="思路：栈"></a>思路：栈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">brackets</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> start = s[i]</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span> || s[i] == <span class="string">&#x27;&#123;&#x27;</span> || s[i] == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">push</span>(start)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> end = arr[arr.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span>(start == <span class="string">&#x27;)&#x27;</span> &amp;&amp; end == <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        || s[i] == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; end == <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">        || s[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; end == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">          arr.<span class="title function_">pop</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣 </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过WebContext和Canvas制作的音频可视化组件</title>
      <link href="/2022/08/09/%E9%80%9A%E8%BF%87WebContext%E5%92%8CCanvas%E5%88%B6%E4%BD%9C%E7%9A%84%E9%9F%B3%E9%A2%91%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/08/09/%E9%80%9A%E8%BF%87WebContext%E5%92%8CCanvas%E5%88%B6%E4%BD%9C%E7%9A%84%E9%9F%B3%E9%A2%91%E5%8F%AF%E8%A7%86%E5%8C%96%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、思路来源"><a href="#一、思路来源" class="headerlink" title="一、思路来源"></a>一、思路来源</h2><p>最近在制作自己的博客，想在博客上写一个音乐组件，正好最近看到了音频可视化的相关文章，就来试着自己做一个玩一玩。</p><h2 id="二、WebContext的使用"><a href="#二、WebContext的使用" class="headerlink" title="二、WebContext的使用"></a>二、WebContext的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并返回一个webContext对象</span></span><br><span class="line"><span class="keyword">const</span> ac = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">AudioContext</span>()</span><br><span class="line"><span class="comment">// 创建一个analyser对象，用于音频时间和频率数据，以及实现数据可视化。</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">analyser</span> = ac.<span class="title function_">createAnalyser</span>()</span><br><span class="line"><span class="comment">// 执行傅里叶变换，用来获取频域数据（不太懂，数学不太好）。</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">analyser</span>.<span class="property">fftSize</span> = <span class="number">512</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">bufferLength</span> = <span class="variable language_">this</span>.<span class="property">analyser</span>.<span class="property">fftSize</span> / <span class="number">2</span></span><br><span class="line">获取audio节点</span><br><span class="line"><span class="keyword">const</span> audio = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">audio</span></span><br><span class="line"><span class="comment">// 创建一个MediaElementAudioSourceNode对象，输入HTML对象，即可被播放或者修改</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">source</span> = ac.<span class="title function_">createMediaElementSource</span>(audio)</span><br><span class="line"><span class="comment">// audio与analyser连接</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">source</span>.<span class="title function_">connect</span>(<span class="variable language_">this</span>.<span class="property">analyser</span>)</span><br><span class="line"><span class="comment">// analyser与destination连接，返回音频最终节点，一般是扬声器</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">analyser</span>.<span class="title function_">connect</span>(ac.<span class="property">destination</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">bufferLength</span> = <span class="variable language_">this</span>.<span class="property">analyser</span>.<span class="property">frequencyBinCount</span></span><br></pre></td></tr></table></figure><h2 id="三、Canvas的使用"><a href="#三、Canvas的使用" class="headerlink" title="三、Canvas的使用"></a>三、Canvas的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取画布节点</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span> = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">canvas</span></span><br><span class="line"><span class="comment">// 设置画布宽高</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">clientWidth</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">clientHeight</span></span><br><span class="line"><span class="comment">// 建立一个2d二维渲染上下文</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">ctx</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、绘制画布"><a href="#四、绘制画布" class="headerlink" title="四、绘制画布"></a>四、绘制画布</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Uint8Array表示一个8位无符号整型数组</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dataArray</span> = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(<span class="variable language_">this</span>.<span class="property">bufferLength</span>)</span><br><span class="line"><span class="comment">// 将当前频率复制到Uint8Array数组中，最终获得音频对象。</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">analyser</span>.<span class="title function_">getByteFrequencyData</span>(<span class="variable language_">this</span>.<span class="property">dataArray</span>)</span><br><span class="line"><span class="comment">// 清除画布</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span>, <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span>)</span><br><span class="line"><span class="comment">// 设置音柱宽度</span></span><br><span class="line"><span class="keyword">const</span> barWidth = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> / <span class="variable language_">this</span>.<span class="property">bufferLength</span> * <span class="number">2.3</span></span><br><span class="line"><span class="comment">// 遍历dataArray数组获得每一项作为音柱高度，颜色自定义</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">dataArray</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> barHeight = item</span><br><span class="line">  <span class="keyword">const</span> r = <span class="number">50</span></span><br><span class="line">  <span class="keyword">const</span> g = <span class="number">250</span> * (index / <span class="variable language_">this</span>.<span class="property">bufferLength</span>)</span><br><span class="line">  <span class="keyword">const</span> b = barHeight + <span class="number">25</span> * (index / <span class="variable language_">this</span>.<span class="property">bufferLength</span>)</span><br><span class="line">  <span class="comment">// 设置音柱颜色</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">fillStyle</span> = <span class="string">`rgba(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>, .7)`</span></span><br><span class="line">  <span class="comment">// 设置音柱位置(x, y, width, height)</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">fillRect</span>(barWidth * (index + <span class="number">1</span>), <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> - barHeight, barWidth, barHeight)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用requestAnimationFrame不断渲染动画</span></span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(<span class="variable language_">this</span>.<span class="property">renderCanavs</span>)</span><br></pre></td></tr></table></figure><h2 id="五、效果图"><a href="#五、效果图" class="headerlink" title="五、效果图"></a>五、效果图</h2><p><img src="/images/audio_bar.png"></p><p>加入了audio的控件和背景图美化组件。</p>]]></content>
      
      
      <categories>
          
          <category> 自娱自乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> WebContext </tag>
            
            <tag> 自定义组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级程序设计node.md</title>
      <link href="/2022/08/09/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1node/"/>
      <url>/2022/08/09/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1node/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><h2 id="1、var"><a href="#1、var" class="headerlink" title="1、var"></a>1、var</h2><h3 id="1-1-变量提升"><a href="#1-1-变量提升" class="headerlink" title="1.1 变量提升"></a>1.1 变量提升</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上面代码不会报错，因为使用 <font color="skyblue">var</font> 关键字声明的变量会自动提升到函数作用域顶部。</p><h3 id="1-2-函数作用域"><a href="#1-2-函数作用域" class="headerlink" title="1.2 函数作用域"></a>1.2 函数作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// Matt</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">//Matt</span></span><br></pre></td></tr></table></figure><h3 id="1-3-全局声明"><a href="#1-3-全局声明" class="headerlink" title="1.3 全局声明"></a>1.3 全局声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>) <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><p>使用 <font color="skyblue">var</font> 在全局作用域中声明的变量会成为 <font color="red">window</font> 对象的属性。</p><h2 id="2、let"><a href="#2、let" class="headerlink" title="2、let"></a>2、let</h2><h3 id="2-1-块级作用域"><a href="#2-1-块级作用域" class="headerlink" title="2.1 块级作用域"></a>2.1 块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 26</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// ReferenceError: age没有定义</span></span><br></pre></td></tr></table></figure><h3 id="2-2-暂时性死区"><a href="#2-2-暂时性死区" class="headerlink" title="2.2 暂时性死区"></a>2.2 暂时性死区</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// ReferenceError: age没有定义</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br></pre></td></tr></table></figure><p>在 <font color="skyblue">let</font> 声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone），在此阶段引用任何后面才声明的变量都会抛出<font color="red">ReferenceError</font>。</p><h3 id="2-3-全局声明"><a href="#2-3-全局声明" class="headerlink" title="2.3 全局声明"></a>2.3 全局声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">26</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>使用 <font color="skyblue">let</font> 在全局作用域中声明的变量不会成为 <font color="red">window </font> 对象的属性。不过， <font color="skyblue">let</font> 声明仍然是在全局作用域中发生的，相应变量会在页面的生命周期内存续。因此，为了避免 <font color="red">SyntaxError</font> ，必须确保页面不会重复声明同一个变量。</p><h2 id="3、const"><a href="#3、const" class="headerlink" title="3、const"></a>3、const</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">26</span></span><br><span class="line">age = <span class="number">36</span> <span class="comment">// TypeError：给常量赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 也不允许重复声明</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span> <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 声明的作用域也是块</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Matt&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&#x27;Nicholas&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// Matt</span></span><br></pre></td></tr></table></figure><h2 id="4、声明风格"><a href="#4、声明风格" class="headerlink" title="4、声明风格"></a>4、声明风格</h2><h3 id="4-1、不使用-var"><a href="#4-1、不使用-var" class="headerlink" title="4.1、不使用 var"></a>4.1、不使用 <font color="red">var</font></h3><p>只使用 <font color="skyblue">let</font> 和 <font color="skyblue">const</font> 有助于提升代码质量，因为变量有了明确的作用域、声明位置，以及不变的值。</p><h3 id="4-2、-const-优先，-let-次之"><a href="#4-2、-const-优先，-let-次之" class="headerlink" title="4.2、 const 优先， let 次之"></a>4.2、 <font color="skyblue">const</font> 优先， <font color="skyblue">let</font> 次之</h3><p>使用 <font color="skyblue">const</font> 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作，只在提前知道未来会有修改时，再使用 <font color="skyblue">let</font> 。</p><hr><h1 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h1><h2 id="1、typeof-操作符"><a href="#1、typeof-操作符" class="headerlink" title="1、typeof  操作符"></a>1、typeof  操作符</h2><p>对一个值使用typeof操作符会返回下列字符串之一：</p><ul><li>“undefined” 表示值<font color="orange"><em>未定义</em></font></li><li>“boolean” 表示值为<font color="orange"><em>布尔值</em></font></li><li>“string” 表示值为<font color="orange"><em>字符串</em></font></li><li>“number” 表示值为<font color="orange"><em>数值</em></font></li><li>“object” 表示值为<font color="orange"><em>对象</em></font>或<font color="orange"><em>null</em></font></li><li>“function” 表示值为<font color="orange"><em>函数</em></font></li><li>“symbol” 表示值为<font color="orange"><em>符号</em></font></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&quot;some string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message) <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(message)) <span class="comment">// &quot;string&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2、Undefined-类型"><a href="#2、Undefined-类型" class="headerlink" title="2、Undefined 类型"></a>2、Undefined 类型</h2><p>使用 <font color="red">var</font> 和 <font color="red">let</font> 声明了变量但没有初始化时，就相当于给变量赋予了 <font color="blue">undefined</font> 值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>包含 <font color="blue">undefined</font> 值的变量跟未定义变量是有区别的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age) <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>但调用 <font color="blue">typeof</font> 时，返回的结果都是 <font color="blue">undefined</font> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> age) <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3、Null-类型"><a href="#3、Null-类型" class="headerlink" title="3、Null 类型"></a>3、Null 类型</h2><p>Null 类型只有一个值，即特殊值 <font color="blue">null</font> 。逻辑上讲， <font color="blue">null</font> 值表示一个空对象指针，因此调用 typeof 会返回 <font color="red">“object”</font> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> car = <span class="literal">null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> car) <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><p> <font color="blue">undefined</font> 值是由 <font color="blue">null</font> 值派生而来的，因此 ECMA-262 将它们定义为表面上相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="4、Boolean-类型"><a href="#4、Boolean-类型" class="headerlink" title="4、Boolean 类型"></a>4、Boolean 类型</h2><p>Boolean 类型有两个字面值： <font color="green">true</font> 和 <font color="red">false</font> 。这两个布尔值不同于数值，因此 <font color="green">true</font> 不等于1， <font color="red">false</font> 不等于0。注意布尔值是区分大小写的，因此 <font color="green">True</font> 和 <font color="red">False</font> 是有效的标识符，但不是布尔值。</p><p>Boolean() 转型函数可以在任意类型的数据上调用，而且始终返回一个布尔值。什么值能转换为  <font color="green">true</font> 或 <font color="red">false</font> 的规则取决于数据类型和实际的值。下表总结了不同类型与布尔值之间的转换规则：</p><table><thead><tr><th align="center">数据类型</th><th align="center">转换为 <font color="green">true</font> 的值</th><th align="center">转换为 <font color="red">false</font> 的值</th></tr></thead><tbody><tr><td align="center">Boolean</td><td align="center"><font color="green">true</font></td><td align="center"><font color="red">false</font></td></tr><tr><td align="center">String</td><td align="center">非空字符串</td><td align="center">“”（空字符串）</td></tr><tr><td align="center">Number</td><td align="center">非零数值（包括无穷值）</td><td align="center">0、NaN</td></tr><tr><td align="center">Object</td><td align="center">任意对象</td><td align="center">null</td></tr><tr><td align="center">Undefined</td><td align="center">N/A（不存在）</td><td align="center">undefined</td></tr></tbody></table><h2 id="5、Number-类型"><a href="#5、Number-类型" class="headerlink" title="5、Number 类型"></a>5、Number 类型</h2><p>Number 类型使用 <font color="blue">IEEE 754</font> 格式表示整数和浮点数（在某些语言中也叫双精度值）。不同的数值类型相应地也有不用的数值字面量格式。</p><p>最基本的数值字面量格式是十进制整数，直接写出来即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intNum = <span class="number">55</span> <span class="comment">// 整数</span></span><br></pre></td></tr></table></figure><p>整数也可以用八进制（以 8 位基数）或十六进制（以 16 为基数）字面量表示。对于八进制字面量，第一个数字必须是零（0），然后是相应的八进制数字（数值 0 ~ 7）。如果字面量中包含的数字超出了应有的范围，就会忽略前缀的零，后面的数字序列会被当成十进制数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> octalNum1 = <span class="number">070</span> <span class="comment">// 八进制的 56</span></span><br><span class="line"><span class="keyword">let</span> octalNum2 = <span class="number">079</span> <span class="comment">// 无效的八进制值，当成 79 处理</span></span><br><span class="line"><span class="keyword">let</span> octalNum3 = <span class="number">08</span> <span class="comment">// 无效的八进制值，当成 8 处理</span></span><br></pre></td></tr></table></figure><p>八进制字面量在严格模式下是无效的，会导致 JavaScript引擎抛出语法错误。（严格模式下，如果要表示八进制值，应该使用0o。）</p><h3 id="5-1-浮点值"><a href="#5-1-浮点值" class="headerlink" title="5.1 浮点值"></a>5.1 浮点值</h3><p>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.1</span></span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">let</span> floatNum3 = <span class="number">.1</span></span><br></pre></td></tr></table></figure><p>存储浮点值使用的内存空间是存储整数值的两倍。所以，在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小数点后面跟着 0（如 1.0），那它也会被转换成整数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.</span> <span class="comment">// 小数点后面没有数字，当成整数 1 处理</span></span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">10.0</span> <span class="comment">// 小数点后面是零，当成整数 10 处理</span></span><br></pre></td></tr></table></figure><p>对于非常大或非常小的数值，浮点值可以用科学记数法来表示。科学记数法用于表示一个应该乘以 10 的给定次幂的数值。ECMAScript 中科学记数法的格式要求是一个数值（整数或浮点数）后面跟一个大写或小写的e，再加上一个要乘的10的多少次幂：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum = <span class="number">3.125e7</span> <span class="comment">// 等于31250000</span></span><br></pre></td></tr></table></figure><p>默认情况下 ECMAscript 会将小数点后至少包含 6 个零的浮点值转换为科学记数法（例如 0.000 000 3 会被转换为 3e - 7 ）。</p><p>浮点值的精确度最高可达到 17 位小数，但在算术计算中远不如整数精确。例如，0.1 加 0.2 得到的不是 0.3 ，而是 0.30000000000000004。由于这种微小的摄入错误，导致很难测试特定的浮点值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a + b == <span class="number">0.3</span>) &#123;              <span class="comment">// 别这样做</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You get 0.3.&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里检测两个数值之和是否等于 0.3。如果两个数值分别是 0.05 和 0.25，或者 0.15 和 0.15，那没问题。但如果是 0.1 和 0.2，测试将失败。</p><h3 id="5-2-值的范围"><a href="#5-2-值的范围" class="headerlink" title="5.2 值的范围"></a>5.2 值的范围</h3><p>由于内存限制，ECMAScript 并不支持所有数值。ECMAScript 可以表示的最小数值保存在 Number.MIN_VALUE 中，这个值在多数浏览器中是5e-324；可以表示的最大数值保存在 Number.MAX_VALUE 中，这个值在多数浏览器中是 1.7976931348623157e+308。如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity 值。正数用 Infinity 表示，负数用 -Infinity 表示。如果计算返回 Infinity ，将不能再进一步用于任何计算，这是因为 Infinity 没有可用于计算的数值表示形式。要确定一个值是不是有限大（即介于 JavaScript 能表示的最小值和最大值之间），可以用 <font color="blue">isFinite()</font> 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span> + <span class="title class_">Number</span>.<span class="property">MAX_VALUE</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(result)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>使用 Number.NEGATIVE_INFINITY 和 Number.POSITIVE_INFINITY 也可以获取 Infinity。这两个属性包含的值分别就是 -Infinity 和 Infinity。</p><h3 id="5-3-NaN"><a href="#5-3-NaN" class="headerlink" title="5.3 NaN"></a>5.3 NaN</h3><p>有一个特殊的数值叫<font color="red"> NaN（Not a Number）</font>，用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用 0 除任何数值在其他语言中通常都会导致错误，从而种植代码执行。但在 ECMAScript 中，0、+0 或 -0 相除都会返回<font color="red"> NaN</font>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>/<span class="number">0</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">0</span>/+<span class="number">0</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>如果<font color="blue">分子</font>是非 0 值，<font color="green">分母</font>是有符号 0 或无符号 0，则会返回 Infinity 或 -Infinity：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>/<span class="number">0</span>) <span class="comment">// Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>/-<span class="number">0</span>) <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><p><font color="red">NaN</font> 有几个独特的属性。首先，任何涉及 <font color="red">NaN</font> 的操作始终返回 <font color="red">NaN</font>（如 <font color="red">NaN</font>/10），在连续多步计算时这可能是个问题。其次，<font color="red">NaN</font> 不包括 <font color="red">NaN</font> 在内的任何值。例如：下面的比较操作会返回 <font color="red">false</font>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>为此，ECMAScript 提供了 <font color="blue">isNaN()</font> 函数。该函数接收一个参数判断是否“不是数值”，会尝试把参数转换为数值。某些非数值的值可以直接转换成数值，如字符串 “10” 或布尔值。不能转换为数值的值都会导致这个函数返回 <font color="green">true</font>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)) <span class="comment">// false，10是数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;10&quot;</span>)) <span class="comment">// false，可以转换为数值10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&quot;blue&quot;</span>)) <span class="comment">// true，不可以转换为数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="literal">true</span>)) <span class="comment">// false，可以转换为数值1</span></span><br></pre></td></tr></table></figure><h3 id="5-4-数值转换"><a href="#5-4-数值转换" class="headerlink" title="5.4 数值转换"></a>5.4 数值转换</h3><p>有 3 个函数可以将非数值转换为数值：<font color="skyblue">Number()</font>、<font color="skyblue">parseInt()</font>、<font color="skyblue">parseFloat()</font>。<font color="skyblue">Number()</font> 是转型函数，可用于任何数据类型。后两个函数主要用于将字符串转换为数值。对于同样的参数，这 3 个函数执行的操作也不同。</p><p><font color="skyblue">Number()</font> 函数基于如下规则执行转换：</p><ul><li><p>布尔值，<font color="green">true</font> 转换为 1，<font color="red">false</font> 转换为 0。</p></li><li><p>数值，直接返回。</p></li><li><p><font color="red">null</font>，返回 0。</p></li><li><p><font color="red">undefined</font>，返回 <font color="red">NaN</font>。</p></li><li><p>字符串，应用以下规则：</p><ul><li>如果字符串包括数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值。因此<font color="skyblue">Number(“1”)</font> 返回 1，<font color="skyblue">Number(“123”)</font> 返回 123，<font color="skyblue">Number(“011”)</font> 返回 11（忽略前面的零）。</li><li>如果字符串包含有效的浮点值格式如 “1.1”，则会转换为相应的浮点值（同样，忽略前面的零）。</li><li>如果字符串包含有效的十六进制格式如 “0xf”，则会转换为与该十六进制值对应的十进制整数值。</li><li>如果是空字符串（不包含字符），则返回 0。</li><li>如果字符串包含除上述情况之外的其他字符，则返回 <font color="red">NaN</font>。</li></ul></li><li><p>对象，调用 <font color="blue">valueOf()</font> 方法，并按照上述规则转换返回的值。如果转换结果是 <font color="red">NaN</font>，则调用 <font color="blue">toString()</font> 方法，再按照转换字符串的规则转换。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="title class_">Number</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title class_">Number</span>(<span class="string">&quot;&quot;</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="title class_">Number</span>(<span class="string">&quot;000011&quot;</span>) <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="title class_">Number</span>(<span class="literal">true</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JS </tag>
            
            <tag> 红宝书 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
